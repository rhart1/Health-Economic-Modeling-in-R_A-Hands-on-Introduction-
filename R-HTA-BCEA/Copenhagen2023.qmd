---
#' Dynamic attributes (specific info to the slides being prepared)
title: "Introduction to `R` for Health Economics using `BCEA`"
shorttitle: "Intro to `R` in HTA & [`BCEA`](https://gianluca.statistica.it/software/bcea)"
subtitle: ""
date: "12 November 2023"
date-format: "D MMMM YYYY"
conference:
   title: ISPOR Europe 2023
   location: Copenhagen
   session: "Health Economic Modeling in `R`: A Hands-on Introduction"
shortconference: "ISPOR 2023"
postit: 
   random-talks: true
   social-media: true
thank-you: 
   show: true
   file: phoebe
bibliography: "/home/gianluca/Dropbox/Rstuff/Website/publications/mypubs.bib"


#' (Semi-)Fixed attributes (don't need to, but can change these)
author: 
  - name: "**Gianluca Baio**"
institute:  
   - uni: "Department of Statistical Science &nbsp; | &nbsp; University College London"
email: 
   text: "[g.baio@ucl.ac.uk](mailto:g.baio@ucl.ac.uk)"
   icon: '`r fontawesome::fa("envelope",fill="#00acee",height="0.8em",prefer_type="solid")`'
url: 
  - text: "[https://gianluca.statistica.it](https://gianluca.statistica.it)"
    icon: '`r fontawesome::fa("firefox",fill="#EA7600",height="0.8em")`'
  - text: "[https://egon.stats.ucl.ac.uk/research/statistics-health-economics](https://egon.stats.ucl.ac.uk/research/statistics-health-economics)"
    icon: '`r fontawesome::fa("firefox",fill="#EA7600",height="0.8em")`'
github: 
  - text: "[https://github.com/giabaio](https://github.com/giabaio)"
    icon: '`r fontawesome::fa("github",fill="black",height="0.8em")`'
  - text: "[https://github.com/StatisticsHealthEconomics](https://github.com/StatisticsHealthEconomics)"
    icon: '`r fontawesome::fa("github",fill="black",height="0.8em")`'
social: 
  - text: '[\@gianlubaio@mas.to](https://mas.to/@gianlubaio)'
    icon: '`r fontawesome::fa("mastodon",fill="#563acc",height="0.8em")`'
  - text: '[\@gianlubaio](https://twitter.com/gianlubaio)'
    icon: '`r fontawesome::fa("x-twitter",fill="black",height="0.8em")`'
orchid: 
   show: false
   url: "[https://orcid.org/0000-0003-4314-2570](https://orcid.org/0000-0003-4314-2570)"
   icon: '`r fontawesome::fa("orcid",fill="black",height="0.8em")`'


#' Computed attributes (from other parts of the yml file)
date-as-string: '`r ifelse((rmarkdown::metadata$date)!="",(rmarkdown::metadata$date |> as.Date(format("%e %B %Y")) |> format("%e %B %Y")),(Sys.Date() |> format("%e %B %Y")))`'
shortdate: '`r ifelse((rmarkdown::metadata$date)!="",(rmarkdown::metadata$date |> as.Date(format("%e %B %Y")) |> format("%e %b %Y")),(Sys.Date() |> format("%e %b %Y")))`'
shorttitle-string: '`r ifelse((rmarkdown::metadata$shorttitle)!="",paste(rmarkdown::metadata$shorttitle,"&nbsp; | &nbsp;"),"")`'
shortconference-string: '`r ifelse((rmarkdown::metadata$shortconference)!="",paste(rmarkdown::metadata$shortconference,"&nbsp; | &nbsp;"),"")`'


#' Format
from: markdown+emoji
format:
  revealjs: 
    template-partials: 
      - assets/title-slide.html
    include-in-header: 
      - assets/latex_macros.html
    transition: none
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    theme: assets/gb.scss
# default width/height: 1050/700
    width: 1200 
    height: 800
#    margin: 0.05
    footer: |
       &copy; Gianluca Baio (UCL) &nbsp; | &nbsp; [{{< fa brands x-twitter >}}](https://twitter.com/giabaio){title='Follow me on X'} &nbsp; 
       [{{< fa brands mastodon >}}](https://mas.to/@gianlubaio){title='Follow me on Mastodon'} &nbsp; 
       [{{< fa brands github >}}](https://github.com/giabaio){title='Check out my repos'} &nbsp; 
       [{{< fa envelope >}}](mailto:g.baio@ucl.ac.uk){title='Email me'} &nbsp; 
       [{{< fa brands firefox >}}](https://gianluca.statistica.it){title='Visit my website'} &nbsp; | &nbsp; 
       {{< meta shorttitle-string >}} {{< meta shortconference-string >}} {{< meta shortdate >}}

#' Filters
filters:
 - code-visibility
lightbox: auto

#' Title slide attributes
title-slide-attributes:
#    data-background-image: "images/ucl-campus.png"
    data-background-size: stretch
    data-background-opacity: "0.08"
#    data-background-color: "#002248"
---

```{r}
#| label: setup
#| echo: false

library(slides)
# This makes the fonts play nicely within the figures
#knitr::opts_chunk$set(dev = "ragg_png")

# Loads 'tidyverse'
library(tidyverse, quietly=TRUE)

```

## Disclaimer... {transition="convex-in none-out" transition-speed="fast"}

![](images/screenshot.png)

::: {style="margin-top: 50px"}
... Just so you know what [you're about to get yourself into...](https://twitter.com/ManuelaJoore/status/1191397718930939904) :wink:
:::

## Health technology assessment (HTA) {transition="fade-in slide-out" transition-speed="slow"}

**Objective**: Combine [costs]{.red} and [benefits]{.blue} of a given intervention into a rational scheme for allocating resources 


::: {.r-stack}

![](img/hta-scheme1.png){.fragment width="80%"}

![](img/hta-scheme2.png){.fragment width="80%"}

![](img/hta-scheme3.png){.fragment width="80%"}

![](img/hta-scheme4.png){.fragment width="80%"}

:::


## Health technology assessment (HTA) {transition="fade-in slide-out" transition-speed="slow" visibility="uncounted"}

For each module, we may need/use different/specific packages! (the "R-HTA-verse"?)

:::: {.r-stack}

![](img/hta-scheme5.png){.fragment width="80%"}

![](img/hta-scheme6.png){.fragment width="80%"}

::::

## R & HTA {.smaller}

### What is `R`?

- `R` is a very powerful **statistical software** 
   - Specifically designed for statistical analysis
   - **Very** large community of contributors &ndash; basically you can find code/packages to do any statistical analysis you need
   - [**Open source and free**]{.red}
   
:::{.fragment}

### Why use `R`?

- Everything can be (and almost invariably is) scripted 
- This helps with:
   - Reproducibility
   - Sharing your work with colleagues
   - Reusing templates for "similar" projects
   - ["**Transparency**"]{.myblue}!
- **Fantastic** graphical capability
   - Especially with new [`tidyverse`](https://www.tidyverse.org/) packages ([`ggplot2`](https://ggplot2.tidyverse.org/))
- Generally **fit for purpose** 
   - You **need** advanced tools for many (most??) of the models you do...
:::

<!--
:::: {.nobar}
## {background-iframe="https://r-hta.org/" background-interactive=true}

::: footer
   
:::
::::
-->

## But...

> "*Transparency is in the eye of the beholder*"
>
> (Andy Briggs at the [R-HTA workshop](https://www.youtube.com/channel/UCUog4U8cjXuQIvINSDsiEJQ) &ndash; October 2020)

{{< video https://youtu.be/HCsJ8nqNttU start="270" width="800" height="300" >}}

. . .
  
::: {style="position: absolute; left: 0%; top: 70%;"} 
- There **is** an entry cost
- And more importantly, the effort goes hand in hand with sophistication in the statistical modelling associated with the economic evaluation!

:::


:::: {.nobar visibility="uncounted"}
# {background-image="img/chandler.gif" background="#002248"}

::: {.footer style="background-color: transparent"}
:::
::::

# `BCEA`

## A `R` package for (Bayesian) cost-effectiveness analysis {.smaller}

### `BCEA` and its use directly in `R` are designed with these objectives in mind

1. Checking the model assumptions

   - Do we mean what we mean (eg in terms of PSA simulations)?...
   - Simulation error (especially, **but not only**, for a Bayesian approach)

:::{.fragment}
2. Produce the base-case economic evaluation

   - Whatâ€™s the most cost-effective intervention, given current evidence? 
   - Cost-effectiveness plane, Expected Incremental Benefit (as a function of $k$), etc
:::

:::{.fragment}
3. Perform uncertainty analysis
  
   - Standard PSA (mandatory): Cost-effectiveness Plane, CEAC, etc
   - Fairly easy (but not always used): CEAF
   - More advanced/"too difficult" (rarely used): EVP(P)I/EVSI
:::

:::{.fragment}
4. Standardised reporting
 
   - Graphical tools (use **excellent** `R` facilities)
   - Embed code in structured reports (`docx`/`pdf`)
:::

## `BCEA` 

### An `R` package for (Bayesian) cost-effectiveness analysis

![](img/bcea_scheme-1.png){width="80%"}

::: {style="position: absolute; left: 68%; top: 75%; font-family: 'Ubuntu Mono'; font-size: .75em;"} 
{{< fa brands firefox >}} [https://gianluca.statistica.it/software/bcea](https://gianluca.statistica.it/software/bcea)

{{< fa brands github >}} [https://github.com/giabaio/BCEA](https://github.com/giabaio/BCEA)
:::

# Using `BCEA` to summarise outputs of an economic model

## How does `BCEA` work?

::: {.panel-tabset}

## Installation

- `BCEA` is available from [CRAN](https://cran.r-project.org/)
   - Current *stable* version: 2.4-2 (3 September 2022)

- But it is also under constant development in the [GitHub repository](https://github.com/giabaio/BCEA)
   - Current *stable* version: 2.4-4 (5 June 2023)
   - Current *development* (ongoing development/fixes, until integrated in the next stable release)

```{r howwork1}
#| eval: false
#| echo: true

# Install BCEA (only required once and needs an internet connection!). 

# You can either get the "official" version from CRAN
install.packages("BCEA")

# Can also install the stable from GitHub
install.packages("remotes")                            # to install packages from GitHub       
remotes::install_github("giabaio/BCEA")                # stable version (2.4.4)

# And the *development* version (from GitHub)
remotes::install_github("giabaio/BCEA")                # development version
```

`r vspace("30px")`
NB: The beauty of the GitHub version is that it can be updated on the fly and be immediately available for users!

## Using `BCEA`

```{r howwork2}
#| eval: true
#| echo: false
options(width = 150)
library(BCEA)
library(tidyverse, quietly = TRUE)
data(Vaccine)
inp = createInputs(vaccine_mat,print_is_linear_comb=FALSE)
```
```{r howwork3}
#| eval: false
#| echo: true
library(dplyr)  # (Not necessary - but very helpful for data manipulation!)

library(BCEA)   # Then loads the package (so you can access its functions)
data(Vaccine)   # Loads an example dataset 
```

`r vspace("40px")`

- The "Vaccine" example is a fictional cost-effectiveness model for and influenza vaccine, based on evidence synthesis (and a real case)

- 2 treatment options ("Standard of care" vs "Vaccination") and overall 63 parameters

- Discussed in details in {{< fa book-open >}} [Baio et al, 2017](http://www.statistica.it/gianluca/book/bcea/) and {{< ai pubmed >}} [Baio and Dawid, 2011](https://pubmed.ncbi.nlm.nih.gov/21930515/)

- In this case, PSA simulations obtained from a full Bayesian model, but could be done in a spreadsheet and imported into `R`

## Show. Me. The. Data!

```{r howwork4}
#| echo: true
#| eval: true

# The object 'Vaccine' contains a matrix 'vaccine_mat', with all the simulated values for the many model parameters
# BCEA can create a matrix with the underlying model simulations starting from various formats (BUGS/R/Excel)
# and can get rid of "redundant" columns (those that are linear combination of each other...)
inp = createInputs(vaccine_mat,print_is_linear_comb=FALSE)

# Visualise the output
inp$mat |> as_tibble()                    # "piping" ('%>%' in `tidyverse` or '|>` in newer base `R`) and formatting nicely
```

## Economic model

```{r howwork6}
#| eval: false
#| echo: true
#| code-line-numbers: "1-5|6-15|16-20"
# Defines the number of simulations considered
n.sims=inp$mat %>% nrow()                               # applies the function 'nrow' (number of rows) to the object 'inp$mat'

                                                        # NB: in R 4.1.0, can also use 'native' pipe ('|>')
                                                        # (probably a bit quicker, but in most cases, may be immaterial...)

# Process the model parameters
QALYs.inf = QALYs.pne <- QALYs.hosp <- QALYs.adv <- QALYs.death <- matrix(0,n.sims,2)
for (t in 1:2) {
  QALYs.inf[,t] = ((Infected[,t,1] + Infected[,t,2])*omega[,1]/365)/N
  QALYs.pne[,t] = ((Pneumonia[,t,1] + Pneumonia[,t,2])*omega[,4]/365)/N
  QALYs.hosp[,t] = ((Hospital[,t,1] + Hospital[,t,2])*omega[,5]/365)/N
  QALYs.death[,t] = ((Death[,t,1] + Death[,t,2])*omega[,6])/N
}
QALYs.adv[,2] = (Adverse.events*omega[,7]/365)/N

# Aggregates the model inputs to compute (e,c)
eff = -(QALYs.inf + QALYs.pne + QALYs.adv + QALYs.hosp + QALYs.death) + ...
cost = cost.GP + cost.hosp + cost.otc + ...
```

`r vspace("40px")`

- NB: The data stored in the `Vaccine` object (built-in in `BCEA`) already contains the objects (`eff,cost`) that can be used to run the decision analysis...

- So, this step is actually not needed (but documented in {{< fa book-open >}} [Baio et al, 2017](https://gianluca.statistica.it/book/bcea/))

## Cost & effects
```{r}
options(width=150)
```
```{r howwork8}
#| echo: true
#| eval: true
cbind(eff,cost) %>% as_tibble(.name_repair="universal")       # ensures that the columns are named
```

- These calculations *can* be done also in a spreadsheet (nothing more than algebra, **once you have the simulations**)

:::

## How does `BCEA` work? {visibility="uncounted"}

- At this point, we are ready to call the function `bcea` that runs the economic analysis, for example something like 

```{r howwork9}
#| echo: true
treats = c("Status quo","Vaccination")
m = bcea(e=eff,c=cost,ref=2,interventions=treats,Kmax=50000)
```

- The inputs to the function are
   - `eff`: a **matrix** containing the simulations for the clinical benefits (that is $n_{\rm{sim}}\times n_{\rm{int}}$ values)
   - `cost`: a **matrix** containing the simulations for the costs (that is $n_{\rm{sim}}\times n_{\rm{int}}$ values)
   - `ref`: an indication of which intervention is to be taken as reference (default: the intervention in the first column of `eff` or `cost`)
   - `interventions`: a vector of labels for the interventions being compared 
   - `Kmax`: the maximum value of $k$, the parameter of willingness to pay

. . .

- The output is an object `m` containing several elements
```{r howwork10}
#| echo: true
names(m)
```

## How does `BCEA` work? {visibility="uncounted"}

Can visualise the output in various formats (tables/graphs)

```{r howwork11}
#| echo: true
# The 'summary' "method" produces a tabular output
summary(m)
```


## How does `BCEA` work? {visibility="uncounted"}

`r vspace("-30px")`

Can visualise the output in various formats (tables/graphs)

:::: {.columns style="margin-top: 1em;"}
::: {.column width="50%"}
```{r howwork12}
#| echo: true
# The 'plot' "method" produces a *specific* version of graphical output
plot(m)
```
:::

::: {.column width="50%"}
```{r howwork13}
#| echo: true
ceplane.plot(m,wtp=20000,xlim=c(-.002,.002),ylim=c(-10,20))
```
:::
::::

## How does `BCEA` work? {visibility="uncounted"}

```{r howwork14}
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(fill="springgreen3"))
```

::: {style="position: absolute; left: 60%; top: 65%; font-size: 1.5rem; font-family: Ubuntu Mono"}
{{< fa brands firefox >}} [https://ggplot2.tidyverse.org/](https://ggplot2.tidyverse.org/)

{{< fa brands firefox >}} [https://n8thangreen.github.io/BCEA/](https://n8thangreen.github.io/BCEA/)
:::

<!--
:::: {.nobar}
## {background-iframe="https://n8thangreen.github.io/BCEA" background-interactive=true}

::: footer
   
:::
::::
-->

## How does `BCEA` work? {visibility="uncounted"}

:::: {.columns}
::: {.column width="50%"}
```{r howwork15}
#| echo: true
# Plots the Cost-Effectiveness Acceptability Curve
ceac.plot(m)
```
:::

::: {.column width="50%"}
```{r howwork16}
#| echo: true
# Plots the Expected Value of Partial Information (EVPI)
evi.plot(m)
```
:::
::::


## Specialised plots

`r vspace("-30px")`

- Can generate a *contour* plot of the cost-effectiveness plane and estimate the proportion of points in each quadrant

:::: {.columns}
::: {.column width="30%"}
```{r howwork17}
#| echo: true
#| eval: false
# "Basic" contourplot
contour(m)
```
:::

::: {.column width="65%"}
```{r howwork18}
#| echo: false
# "Basic" contourplot
contour(m)
```
:::
::::

## Specialised plots {visibility="uncounted"}

The specialised function `contour2` also shows the **sustainability area**

:::: {.columns}
::: {.column width="50%"}
```{r howwork19}
#| echo: true
contour2(m)
```
:::

::: {.column width="50%"}
```{r howwork20}
#| echo: true
contour2(m,wtp=100,xlim=c(-.0005,0.0015))
```
:::
::::

## Specialised plots {visibility="uncounted"}

**Cost-effectiveness efficiency frontier**

:::: {.columns}
::: {.column width="50%"}
```{r howwork20bis}
#| echo: true
ceef.plot(m,print.plot=FALSE)
```
:::

::: {.column width="50%"}
```{r howwork20tris}
#| echo: true
ceef.plot(m,print.summary=FALSE)
```
:::
::::

## Exporting graphical output

- `R` has excellent graphical facilities and the graphs produced by `BCEA` can be easily exported to many different formats

```{r howwork21}
#| eval: false
#| echo: true
# "Opens" the graphical device
pdf("NAME_OF_THE_FILE",width=`8`,height=`8`)      `# for 'pdf', units are in inches`
# Makes the plot
ceplane.plot(`BCEA_OBJECT`)                     `# of course, specify whatever name you've chosen when creating the object...`
# "Closes" the graphical device
dev.off()


# "Open" the graphical device"
jpeg("NAME_OF_FILE.jpg",width=`480`,height=`480`)  `# for 'jpeg' units are in px`
# Makes the plot
ceplane.plot(BCEA_OBJECT)
# "Closes" the graphical device
dev.off()
```

`r vspace("30px")`
**NB**: `Rstudio` and [`rmarkdown`](https://rmarkdown.rstudio.com/) can do even more &ndash; that's for another time...

# Advanced use of `BCEA`

## Multiple treatment comparisons
### Probabilistic "depression model"

```{r depression1,echo=FALSE}
n.samples<-1000 

# Number and names of treatments
n.treat<-3
t.names<-c("No treatment","CBT","Antidepressant")

# Over a 30 year time horizon
# Costs for recovery, relapse, and no recovery
c.rec<-rnorm(n=n.samples, mean=1000, sd=50)
c.rel<-rnorm(n=n.samples, mean=2000, sd=100)
c.norec<-rnorm(n=n.samples, mean=2500, sd=125)
# Over a 30 year time horizon
# QALYs for recovery, relapse, and no recovery
q.rec<-rnorm(n=n.samples, mean=26, sd=2)
q.rel<-rnorm(n=n.samples, mean=23, sd=3)
q.norec<-rnorm(n=n.samples, mean=20, sd=4)

# Probabilities of recovery and relapse following recover
p.rec<-p.rel<-matrix(nrow=n.samples, ncol=n.treat)

# Probabilities for no treatment
p.rec[,1]<-rbeta(n=n.samples, shape1=6, shape2=200)
p.rel[,1]<-rbeta(n=n.samples, shape1=2, shape2=100)

# Probabilities for CBT
# Probability of recovery higher than on no treatment
p.rec[,2]<-rbeta(n=n.samples, shape1=6, shape2=130)
# Probability of relapse lower than on no treatment
p.rel[,2]<-rbeta(n=n.samples, shape1=2, shape2=200)

# Probabilities for antidepressant
# Probability of recovery lower than no treatment or CBT
p.rec[,3]<-rbeta(n=n.samples, shape1=6, shape2=120)
# Probability relase lower than no treatment, higher than CBT
p.rel[,3]<-rbeta(n=n.samples, shape1=2, shape2=120)
# Cost of treatment 
c.treat<-t(matrix(rep(c(0,300,30),n.samples),ncol=n.samples,nrow=3))
# Total cost and effects 
costs<-c.treat+p.rec*(1-p.rel)*c.rec+p.rec*p.rel*c.rel+(1-p.rec)*c.norec
effects<-p.rec*(1-p.rel)*q.rec+p.rec*p.rel*q.rel+(1-p.rec)*q.norec
```

- Fictional model comparing antidepressants to cognitive behaviour therapy (CBT) and no treatment in people with depression
- Statistical modelling based on evidence synthesis
   - Benefits: based on QALYs
   - Costs: associated with treatments and various resources use
- Economic modelling: two matrices with relevant population summaries
   - `effects`
   - `costs`
   
`r vspace("30px")`

- NB: The details of the actual modelling are *not* important for the purposes of demonstrating the example...


## Multiple treatment comparisons {visibility="uncounted"}

### Probabilistic "depression model"

:::: {.columns}
::: {.column width="50%"}
```{r depression2}
#| eval: false
#| echo: true
# Intervention labels
t.names<-c("No treatment","CBT","Antidepressant")

# "Standard" analysis: pairwise comparisons
depression.bcea = bcea(effects,costs,
                       interventions=t.names,ref=3)  
# the third intervention is the reference

# Plots the results
plot(depression.bcea)
```
:::

::: {.column width="50%"}
```{r depression3}
#| eval: true
# Intervention labels
t.names<-c("No treatment","CBT","Antidepressant")

# "Standard" analysis: pairwise comparisons
depression.bcea = bcea(effects,costs,interventions=t.names,ref=3)

# Plots the results
plot(depression.bcea)
```
:::
::::

## Multiple treatment comparisons {visibility="uncounted"}

### Probabilistic "depression model"

:::: {.columns}
::: {.column width="50%"}
```{r depression4}
#| eval: false
#| echo: true

# For `multiple treatment comparison`
depression.multi.ce = multi.ce(depression.bcea)

# Specialised plot method
ceac.plot(depression.multi.ce,pos=c(1,0.8))
```

`r vspace("30px")`

NB: In older releases of `BCEA`, this graph was done using the **deprecated** function `mce.plot`

Also: the current `CRAN` version has a little quirk when selecting `graph="ggplot2"` --- this is fixed in the [`GitHub`](https://github.com/giabaio/BCEA) version!

:::

::: {.column width="50%"}
```{r depression5}
#| eval: true
depression.multi.ce = multi.ce(depression.bcea)
ceac.plot(depression.multi.ce,pos=c(1,0.8),graph="base")
```
:::
::::

## Multiple treatment comparisons {visibility="uncounted"}

### Probabilistic "depression model"

:::: {.columns}
::: {.column width="50%"}
- Can use `ggplot` to customise the graph 

```{r depression6}
#| eval: false
#| echo: true
ceac.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") + 
  ggplot2::stat_summary(fun=max, geom="line", 
                        colour="grey25", alpha=.3, lwd=2.5)

```
:::

::: {.column width="50%"}
```{r depression7}
#| eval: true
ceac.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") + 
  ggplot2::stat_summary(fun=max, geom="line", colour="grey25", alpha=.3, lwd=0.5)
```
:::
::::

## Multiple treatment comparisons {visibility="uncounted"}

### Probabilistic "depression model"

:::: {.columns}
::: {.column width="50%"}
- Can also use the specialised function `ceaf.plot`

```{r depression8}
#| eval: false
#| echo: true
# Specialised plot
ceaf.plot(depression.multi.ce)
```
:::

::: {.column width="50%"}
```{r depression9}
#| eval: true
ceaf.plot(depression.multi.ce)
```
:::
::::

## `BCEAweb`

-  Inspired by similar projects &ndash; eg [SAVI](http://savi.shef.ac.uk/SAVI/)
- Create a web interface to use BCEA without even opening R (or even having it installed on your computer!)
`r vspace("40px")`

. . .

- Typical work flow
   1. Design the economic model (eg Markov model, decision tree, ...)
   2. Run the statistical analysis to estimate the quantities of interest (eg survival analysis, evidence synthesis, ...)
   3. Run the economic model and obtain "PSA samples"     
   4. Upload "PSA samples", including values for $(e,c)$ to `BCEAweb`
   5. Use `BCEA` in the background to do **all** the economic analysis
   6. Create reports that can be used as the basis for papers, reimbursement files, ...

## `BCEAweb` {visibility="uncounted"}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1-2|3-8"
# Creates a matrix with the underlying model simulations
inp = createInputs(vaccine_mat, print_is_linear_comb=FALSE)

# Runs BCEAweb
BCEAweb(e=e,                 # matrix of simulations for the effectiveness
        c=c,                 # matrix of simulations for the costs
        parameters=inp$mat   # matrix of simulations for all the model parameters
       )
```

. . .

`r vspace("30px")`

- `BCEAweb` exists as a standalone webapp
   - Can access it {{< fa brands firefox >}}  [here](https://egon.stats.ucl.ac.uk/projects/BCEAweb/) 
- **Or**, you can launch your own "local" version from the `BCEA` package (as in the code above)!
   - This will launch a web page from which you can manipulate your output ({{< fa arrow-circle-right >}} Live Demo)

<!--
:::: {.nobar}
## {background-image="assets/images/reese.gif" background-size="cover"}

::: footer
:::
::::
-->
