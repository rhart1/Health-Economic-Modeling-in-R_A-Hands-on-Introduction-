#| eval: true
#| echo: false
library(BCEA)
data(Vaccine)
inp = CreateInputs(vaccine, print.lincom=FALSE)
inp = createInputs(vaccine, print.lincom=FALSE)
createInputs(vaccine,print_is_linear_comb = FALSE)
createInputs(vaccine_mat,print_is_linear_comb = FALSE)
rm(list=ls())
#| eval: true
#| echo: false
library(BCEA)
data(Vaccine)
ls()
options(width)
options()
options()$width
inp$mat %>% DT::datatable()
library(tidyverse)
inp$mat %>% DT::datatable()
library(BCEA)
data(Vaccine)
inp = createInputs(vaccine_mat,print_is_linear_comb=FALSE)
inp$mat %>% DT::datatable()
ls()
#| eval: false
cbind(eff,cost) %>% as_tibble(`.name_repair="universal"`)     `# ensures that the columns are named`
options()
options()$height
options()$width
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point_colors="blue",point_sizes=.8,area_color="springgreen3")
#| echo: true
treats = c("Status quo","Vaccination")
m = bcea(e=eff,c=cost,ref=2,interventions=treats,Kmax=50000)
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point_colors="blue",point_sizes=.8,area_color="springgreen3")
ceplane.plot
help("ceplane.plot")
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=.8),area=list(color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list("blue",size=.8),area=list(color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=.8),area=list(color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(color="springgreen3"),area_include=FALSE)
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(include=TRUE,color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(include=FALSE,color="springgreen3"))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area_include=FALSE)
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg"area_include=FALSE)
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",area_include=FALSE)
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",area=list(include=FALSE))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",area=list(area_include=FALSE))
#| echo: true
# Using 'ggplot', you can go crazy with customisation...
ceplane.plot(m,wtp=10000,graph="gg",point=list(color="blue",size=1.8),area=list(fill="springgreen3"))
#| echo: true
contour2(m)
#| echo: true
contour2(m,wtp=100)
help(contour2)
help(contour2)
#| echo: true
contour2(m)
#| echo: true
contour2(m,wtp=100,xlim=c(-.0005,0.0015))
#| eval: true
depression.multi.ce = multi.ce(depression.bcea)
n.samples<-1000
# Number and names of treatments
n.treat<-3
t.names<-c("No treatment","CBT","Antidepressant")
# Over a 30 year time horizon
# Costs for recovery, relapse, and no recovery
c.rec<-rnorm(n=n.samples, mean=1000, sd=50)
c.rel<-rnorm(n=n.samples, mean=2000, sd=100)
c.norec<-rnorm(n=n.samples, mean=2500, sd=125)
# Over a 30 year time horizon
# QALYs for recovery, relapse, and no recovery
q.rec<-rnorm(n=n.samples, mean=26, sd=2)
q.rel<-rnorm(n=n.samples, mean=23, sd=3)
q.norec<-rnorm(n=n.samples, mean=20, sd=4)
# Probabilities of recovery and relapse following recover
p.rec<-p.rel<-matrix(nrow=n.samples, ncol=n.treat)
# Probabilities for no treatment
p.rec[,1]<-rbeta(n=n.samples, shape1=6, shape2=200)
p.rel[,1]<-rbeta(n=n.samples, shape1=2, shape2=100)
# Probabilities for CBT
# Probability of recovery higher than on no treatment
p.rec[,2]<-rbeta(n=n.samples, shape1=6, shape2=130)
# Probability of relapse lower than on no treatment
p.rel[,2]<-rbeta(n=n.samples, shape1=2, shape2=200)
# Probabilities for antidepressant
# Probability of recovery lower than no treatment or CBT
p.rec[,3]<-rbeta(n=n.samples, shape1=6, shape2=120)
# Probability relase lower than no treatment, higher than CBT
p.rel[,3]<-rbeta(n=n.samples, shape1=2, shape2=120)
# Cost of treatment
c.treat<-t(matrix(rep(c(0,300,30),n.samples),ncol=n.samples,nrow=3))
# Total cost and effects
costs<-c.treat+p.rec*(1-p.rel)*c.rec+p.rec*p.rel*c.rel+(1-p.rec)*c.norec
effects<-p.rec*(1-p.rel)*q.rec+p.rec*p.rel*q.rel+(1-p.rec)*q.norec
#| eval: false
#| echo: true
# Intervention labels
t.names<-c("No treatment","CBT","Antidepressant")
# "Standard" analysis: pairwise comparisons
depression.bcea = bcea(effects,costs,
interventions=t.names,`ref=3`)
#| eval: true
# Intervention labels
t.names<-c("No treatment","CBT","Antidepressant")
# "Standard" analysis: pairwise comparisons
depression.bcea = bcea(effects,costs,interventions=t.names,ref=3)
# Plots the results
plot(depression.bcea)
#| eval: false
#| echo: true
mce.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") +
ggplot2::stat_summary(fun=max, geom="line",
colour="grey25", alpha=.3, lwd=2.5)
#| eval: false
#| echo: true
ceac.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") +
ggplot2::stat_summary(fun=max, geom="line",
colour="grey25", alpha=.3, lwd=2.5)
#| eval: true
depression.multi.ce = multi.ce(depression.bcea)
ceac.plot(depression.multi.ce,pos=c(1,0.8),graph=c("base","ggplot2"))
ceac.plot(depression.multi.ce,pos=c(1,0.8),graph="ggplot2")
#| eval: false
#| echo: true
ceac.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") +
ggplot2::stat_summary(fun=max, geom="line",
colour="grey25", alpha=.3, lwd=2.5)
#| eval: true
ceac.plot(depression.multi.ce,pos=c(1,1),graph="ggplot2") +
ggplot2::stat_summary(fun=max, geom="line", colour="grey25", alpha=.3, lwd=2.5)
renderthis::to_pdf(from="index.qmd")
renderthis::to_pdf(from="https://gianluca.statistica.it/slides/ispor-2022/index.html")
renderthis::to_pdf(from="https://gianluca.statistica.it/slides/ispor-2022/index.html")
renderthis::to_pdf(from="https://gianluca.statistica.it/slides/ispor-2022/index.html")
renderthis::to_pdf(from="https://gianluca.statistica.it/slides/ispor-2022/index.html",complex_slides = TRUE, partial_slides = TRUE)
renderthis::to_pdf(from="index.qmd",to="bcea-2023.pdf",complex_slides = TRUE,partial_slides = TRUE)
renderthis::to_pdf(from="index.qmd",to="bcea-2023.pdf",complex_slides = FALSE,partial_slides = TRUE)
renderthis::to_pdf(from="index.qmd",to="bcea-2023.pdf")
renderthis::to_pdf(from="index.html",to="bcea-2023.pdf")
icons::download_fontawesome()
remotes::install_github("giabaio/BCEA",ref="dev")
library(BCEA)
data(Vaccine)
inp = createInputs(vaccine_mat,print_is_linear_comb=FALSE)
# The object 'Vaccine' contains a matrix 'vaccine_mat', with all the simulated values for the many model parameters
# BCEA can create a matrix with the underlying model simulations starting from various formats (BUGS/R/Excel)
# and can get rid of "redundant" columns (those that are linear combination of each other...)
inp = createInputs(vaccine_mat,print_is_linear_comb=FALSE)
# Visualise the output
inp$mat %>% as_tibble()                                  # "piping" ('%>%') and formatting nicely
library(tidyverse, quietly = TRUE)
# Visualise the output
inp$mat %>% as_tibble()                                  # "piping" ('%>%') and formatting nicely
